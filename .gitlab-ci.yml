image: axelterizaki/karaokemugen-ci:node-14-phppg-chromium

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  ELECTRON_CACHE: .cache/electron

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "next"'

cache:
  key: km-app-${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - kmfrontend/node_modules/

stages:
  - schedule
  - test
  - build
  - package
  - deploy
  - release

test:
  stage: test
  retry:
    max: 2
  interruptible: true
  needs: []
  services:
    - postgres:12
  variables:
    POSTGRES_USER: karaokemugen_app
    POSTGRES_PASSWORD: musubi
  script:
    - yarn install --check-files --force --cache-folder .yarn
    - yarn buildWorker
    - touch mpv
    - touch ffmpeg
    - mkdir app
    - cp -f config.CICD.yml app/config.yml
    - export LANG=en_US
    - node --version
    - yarn ts-node util/extUnaccentPgcrypto
    - export DISPLAY=':99.0'
    - Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
    - yarn testCI --debug
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^:rocket: new release/'
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "next"'
    - when: never

build-react:
  stage: build
  interruptible: true
  dependencies:
    - test
  needs:
    - test
  artifacts:
    expire_in: 8 hours
    name: km-app-build-${CI_COMMIT_REF_SLUG}
    paths:
    - kmfrontend/build/
    - dist/
    - zipWorker/
  script:
    - yarn build
    - yarn installkmfrontend
    - yarn buildkmfrontend
    - yarn buildWorker
    - yarn ts-node util/sentryUpdateReleases.ts
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^:rocket: new release/'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "next"'
    - if: $CI_COMMIT_TAG
    - when: never

deploy_kmremote:
  stage: deploy
  interruptible: true
  cache: {}
  image: axelterizaki/karaokemugen-ci:transferts
  dependencies:
    - build-react
  needs:
    - build-react
  script: bash util/pushKMRemote.sh
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^:rocket: new release/'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "next"'
    - if: $CI_COMMIT_TAG
    - when: never

pkg_linux:
  stage: package
  image: electronuserland/builder:latest
  tags:
    - amd64
  cache:
    key: km-app-${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - kmfrontend/node_modules/
    policy: pull
  interruptible: true
  artifacts:
    name: km-app-pkglinux-${CI_COMMIT_REF_SLUG}
    paths:
      - release_linux
  dependencies:
    - build-react
  needs:
    - build-react
    - test
  script:
    - rm -Rf release_linux
    - yarn add --dev electron-builder
    - echo $CI_COMMIT_SHORT_SHA >assets/sha.txt
    - bash util/electronBuilder.sh -l
    - ls -la packages/
    - mkdir release_linux
    - mv packages/*.deb release_linux/
    - mv packages/*.tar.gz release_linux/
    - ls -la release_linux/*
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^:rocket: new release/'
    - if: $CI_COMMIT_TAG
    - when: never

pkg_win:
  stage: package
  image: electronuserland/builder:wine-mono
  tags:
# This must be run on a linux-only host. Weirdly this fails badly on Windows hosts.
    - linux
    - amd64
  cache:
    key: km-app-${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - kmfrontend/node_modules/
    policy: pull
  interruptible: true
  artifacts:
    name: km-app-pkgwin-${CI_COMMIT_REF_SLUG}
    paths:
      - release_win
  dependencies:
    - build-react
  needs:
    - build-react
    - test
  script:
    - rm -Rf release_win
    - yarn add --dev electron-builder
    - wget -qO - https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/xUbuntu_18.04/Release.key | apt-key add -
    - apt-get update -qq && apt-get install -y -qq zip
    - wget -qO- http://mugen.karaokes.moe/downloads/dist_win-5.x.tar.gz | tar xz
    - wget http://mugen.karaokes.moe/downloads/vcredist_x64.exe -O build/vc.exe
    - echo $CI_COMMIT_SHORT_SHA >assets/sha.txt
    - bash util/electronBuilder.sh -w
    - ls -la packages/
    - mkdir release_win
    - mv packages/*.exe release_win/
    - mv packages/*.yml release_win/
    - touch portable
    - touch disableAppUpdate
    - zip -rv packages/*.zip portable disableAppUpdate
    - mv packages/*.zip release_win/
    - ls -la release_win/*
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^:rocket: new release/'
    - if: $CI_COMMIT_TAG
    - when: never

pkg_mac:
  stage: package
  cache:
    key: km-app-${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - kmfrontend/node_modules/
    policy: pull
  retry:
    max: 2
  tags:
    - macos
  interruptible: true
  artifacts:
    name: km-app-pkgmac-${CI_COMMIT_REF_SLUG}
    paths:
      - release_mac
  dependencies:
    - build-react
  needs:
    - build-react
    - test
  variables:
    CSC_IDENTITY_AUTO_DISCOVERY: "false"
    ARTIFACT_DOWNLOAD_ATTEMPTS: 10
    RESTORE_CACHE_ATTEMPTS: 10
  script:
    - rm -Rf release_mac
    - yarn add --dev electron-builder@22.10.5
    - wget -qO- http://mugen.karaokes.moe/downloads/dist_mac-5.x.tar.gz | tar xvz
    - echo $CI_COMMIT_SHORT_SHA >assets/sha.txt
    - bash util/electronBuilder.sh -m
    - ls -la packages/
    - mkdir release_mac
    - mv packages/*.dmg release_mac/
    - ls -la release_mac/*
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^:rocket: new release/'
    - if: $CI_COMMIT_TAG
    - when: never

deploy_mac:
  stage: deploy
  image: axelterizaki/karaokemugen-ci:transferts
  interruptible: true
  variables:
    GIT_STRATEGY: none
  cache: {}
  dependencies:
    - pkg_mac
  needs:
    - pkg_mac
  script:
    - ls -la release_mac/*
    - lftp -c "set cmd:fail-exit yes; set ftp:ssl-allow no; open -u $USERNAME,$PASSWORD $HOST; cd site/downloads; mput release_mac/*"
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^:rocket: new release/'
    - if: $CI_COMMIT_TAG
    - when: never

deploy_linux:
  stage: deploy
  image: axelterizaki/karaokemugen-ci:transferts
  interruptible: true
  cache: {}
  variables:
    GIT_STRATEGY: none
  dependencies:
    - pkg_linux
  needs:
    - pkg_linux
  script:
    - ls -la release_linux/*
    - lftp -c "set cmd:fail-exit yes; set ftp:ssl-allow no; open -u $USERNAME,$PASSWORD $HOST; cd site/downloads; mput release_linux/*"
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^:rocket: new release/'
    - if: $CI_COMMIT_TAG

deploy_win:
  stage: deploy
  image: axelterizaki/karaokemugen-ci:transferts
  interruptible: true
  variables:
    GIT_STRATEGY: none
  cache: {}
  dependencies:
    - pkg_win
  needs:
    - pkg_win
  script:
    - ls -la release_win/*
    - lftp -c "set cmd:fail-exit yes; set ftp:ssl-allow no; open -u $USERNAME,$PASSWORD $HOST; cd site/downloads; mput release_win/*"
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^:rocket: new release/'
    - if: $CI_COMMIT_TAG
    - when: never

release_site:
  stage: release
  image: curlimages/curl
  interruptible: true
  dependencies: []
  cache: {}
  needs:
    - deploy_win
    - deploy_linux
    - deploy_mac
  script:
    - sh util/triggerWebsite.sh
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^:rocket: new release/'
    - if: $CI_COMMIT_TAG
    - when: never

weekly_releases:
  stage: schedule
  image: axelterizaki/karaokemugen-git-ssh:latest
  interruptible: true
  cache: {}
  needs: []
  script:
    - bash util/gitPush.sh
  rules:
    # This prevents job from starting if last commit starts with a new release, which means we don't need to make a new one.
    - if: '$CI_COMMIT_MESSAGE =~ /^:rocket: new release/'
      when: never
    - if: '$SCHEDULED_RELEASES == "true"'
    - when: never
